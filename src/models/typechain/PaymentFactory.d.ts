/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PaymentFactoryInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "JOB_ADMIN()": FunctionFragment;
    "JOB_ORACLE()": FunctionFragment;
    "applyForJob(uint256)": FunctionFragment;
    "cashflowFactory()": FunctionFragment;
    "changeRefreshRate(uint8,uint256)": FunctionFragment;
    "chooseApplicant(address,uint256)": FunctionFragment;
    "configureAmount(uint256,uint256)": FunctionFragment;
    "createEventStream(string)": FunctionFragment;
    "createJob(uint256,string,uint256,uint256,uint256,uint8)": FunctionFragment;
    "eventStreams(uint256)": FunctionFragment;
    "finalApplicant(uint256)": FunctionFragment;
    "finalSign(bool,uint256,int96,int96)": FunctionFragment;
    "getEventStreams()": FunctionFragment;
    "getJobs()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseCashflowAllowance(uint256,uint256)": FunctionFragment;
    "initApplicantSign(uint256)": FunctionFragment;
    "initCreatorSign(uint256)": FunctionFragment;
    "jobToApplicants(uint256,uint256)": FunctionFragment;
    "jobs(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "submitWork(uint256,string)": FunctionFragment;
    "updateCashflowFactoryAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "JOB_ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "JOB_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyForJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cashflowFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeRefreshRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseApplicant",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEventStream",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createJob",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eventStreams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalApplicant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalSign",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventStreams",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getJobs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseCashflowAllowance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initApplicantSign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initCreatorSign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobToApplicants",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWork",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCashflowFactoryAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "JOB_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "JOB_ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyForJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashflowFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRefreshRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseApplicant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEventStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventStreams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalApplicant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalSign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventStreams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getJobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseCashflowAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initApplicantSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initCreatorSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobToApplicants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCashflowFactoryAddress",
    data: BytesLike
  ): Result;

  events: {
    "AmountChanged(uint256,uint256)": EventFragment;
    "ApplicantApplied(address,uint256)": EventFragment;
    "ApplicantChosen(address,uint256)": EventFragment;
    "ApplicantSigned(address,uint256)": EventFragment;
    "CreatorSigned(address,uint256)": EventFragment;
    "EventStreamCreated(string,uint256)": EventFragment;
    "FinalResult(address,address,uint256,bool)": EventFragment;
    "FinalSign(address,address,uint256)": EventFragment;
    "JobCompleted(uint256)": EventFragment;
    "JobCreated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "UpdateNumberOfEvents(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplicantApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplicantChosen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplicantSigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorSigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventStreamCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalSign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateNumberOfEvents"): EventFragment;
}

export class PaymentFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PaymentFactoryInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    JOB_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    JOB_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    applyForJob(
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashflowFactory(overrides?: CallOverrides): Promise<[string]>;

    changeRefreshRate(
      newRefreshRate: BigNumberish,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chooseApplicant(
      chosenApplicant: string,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureAmount(
      newAmount: BigNumberish,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEventStream(
      _descriptor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createJob(
      _initAmount: BigNumberish,
      _descriptor: string,
      _refreshRate: BigNumberish,
      _eventStreamId: BigNumberish,
      _deadline: BigNumberish,
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eventStreams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { descriptor: string }>;

    finalApplicant(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    finalSign(
      result: boolean,
      jobID: BigNumberish,
      allowedFlow: BigNumberish,
      maxAllowedFlow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEventStreams(
      overrides?: CallOverrides
    ): Promise<
      [([string, string[]] & { descriptor: string; cid: string[] })[]]
    >;

    getJobs(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number
        ] & {
          creator: string;
          descriptor: string;
          amount: BigNumber;
          refreshRate: BigNumber;
          percentage: number;
          assetCid: string;
          eventStreamId: BigNumber;
          eventsRecorded: BigNumber;
          deadline: BigNumber;
          creatorSigned: boolean;
          applicantSigned: boolean;
          workSubmitted: boolean;
          state: number;
        })[]
      ]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseCashflowAllowance(
      jobId: BigNumberish,
      eventsRecorded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initApplicantSign(
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initCreatorSign(
      jobID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jobToApplicants(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number
      ] & {
        creator: string;
        descriptor: string;
        amount: BigNumber;
        refreshRate: BigNumber;
        percentage: number;
        assetCid: string;
        eventStreamId: BigNumber;
        eventsRecorded: BigNumber;
        deadline: BigNumber;
        creatorSigned: boolean;
        applicantSigned: boolean;
        workSubmitted: boolean;
        state: number;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitWork(
      jobID: BigNumberish,
      assetCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCashflowFactoryAddress(
      _cashflowFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  JOB_ADMIN(overrides?: CallOverrides): Promise<string>;

  JOB_ORACLE(overrides?: CallOverrides): Promise<string>;

  applyForJob(
    jobID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashflowFactory(overrides?: CallOverrides): Promise<string>;

  changeRefreshRate(
    newRefreshRate: BigNumberish,
    jobID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chooseApplicant(
    chosenApplicant: string,
    jobID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureAmount(
    newAmount: BigNumberish,
    jobID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEventStream(
    _descriptor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createJob(
    _initAmount: BigNumberish,
    _descriptor: string,
    _refreshRate: BigNumberish,
    _eventStreamId: BigNumberish,
    _deadline: BigNumberish,
    _percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eventStreams(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  finalApplicant(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  finalSign(
    result: boolean,
    jobID: BigNumberish,
    allowedFlow: BigNumberish,
    maxAllowedFlow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEventStreams(
    overrides?: CallOverrides
  ): Promise<([string, string[]] & { descriptor: string; cid: string[] })[]>;

  getJobs(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      number
    ] & {
      creator: string;
      descriptor: string;
      amount: BigNumber;
      refreshRate: BigNumber;
      percentage: number;
      assetCid: string;
      eventStreamId: BigNumber;
      eventsRecorded: BigNumber;
      deadline: BigNumber;
      creatorSigned: boolean;
      applicantSigned: boolean;
      workSubmitted: boolean;
      state: number;
    })[]
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseCashflowAllowance(
    jobId: BigNumberish,
    eventsRecorded: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initApplicantSign(
    jobID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initCreatorSign(
    jobID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jobToApplicants(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  jobs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      number
    ] & {
      creator: string;
      descriptor: string;
      amount: BigNumber;
      refreshRate: BigNumber;
      percentage: number;
      assetCid: string;
      eventStreamId: BigNumber;
      eventsRecorded: BigNumber;
      deadline: BigNumber;
      creatorSigned: boolean;
      applicantSigned: boolean;
      workSubmitted: boolean;
      state: number;
    }
  >;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitWork(
    jobID: BigNumberish,
    assetCid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCashflowFactoryAddress(
    _cashflowFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    JOB_ADMIN(overrides?: CallOverrides): Promise<string>;

    JOB_ORACLE(overrides?: CallOverrides): Promise<string>;

    applyForJob(jobID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cashflowFactory(overrides?: CallOverrides): Promise<string>;

    changeRefreshRate(
      newRefreshRate: BigNumberish,
      jobID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chooseApplicant(
      chosenApplicant: string,
      jobID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureAmount(
      newAmount: BigNumberish,
      jobID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createEventStream(
      _descriptor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createJob(
      _initAmount: BigNumberish,
      _descriptor: string,
      _refreshRate: BigNumberish,
      _eventStreamId: BigNumberish,
      _deadline: BigNumberish,
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    eventStreams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    finalApplicant(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    finalSign(
      result: boolean,
      jobID: BigNumberish,
      allowedFlow: BigNumberish,
      maxAllowedFlow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getEventStreams(
      overrides?: CallOverrides
    ): Promise<([string, string[]] & { descriptor: string; cid: string[] })[]>;

    getJobs(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number
      ] & {
        creator: string;
        descriptor: string;
        amount: BigNumber;
        refreshRate: BigNumber;
        percentage: number;
        assetCid: string;
        eventStreamId: BigNumber;
        eventsRecorded: BigNumber;
        deadline: BigNumber;
        creatorSigned: boolean;
        applicantSigned: boolean;
        workSubmitted: boolean;
        state: number;
      })[]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseCashflowAllowance(
      jobId: BigNumberish,
      eventsRecorded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initApplicantSign(
      jobID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initCreatorSign(
      jobID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    jobToApplicants(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number
      ] & {
        creator: string;
        descriptor: string;
        amount: BigNumber;
        refreshRate: BigNumber;
        percentage: number;
        assetCid: string;
        eventStreamId: BigNumber;
        eventsRecorded: BigNumber;
        deadline: BigNumber;
        creatorSigned: boolean;
        applicantSigned: boolean;
        workSubmitted: boolean;
        state: number;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitWork(
      jobID: BigNumberish,
      assetCid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCashflowFactoryAddress(
      _cashflowFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AmountChanged(
      amount?: null,
      jobID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; jobID: BigNumber }
    >;

    ApplicantApplied(
      applicant?: null,
      jobID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { applicant: string; jobID: BigNumber }
    >;

    ApplicantChosen(
      applicant?: null,
      jobID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { applicant: string; jobID: BigNumber }
    >;

    ApplicantSigned(
      applicant?: null,
      jobID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { applicant: string; jobID: BigNumber }
    >;

    CreatorSigned(
      creator?: null,
      jobID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { creator: string; jobID: BigNumber }
    >;

    EventStreamCreated(
      descriptor?: null,
      streamID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { descriptor: string; streamID: BigNumber }
    >;

    FinalResult(
      creator?: null,
      applicant?: null,
      jobID?: null,
      result?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      { creator: string; applicant: string; jobID: BigNumber; result: boolean }
    >;

    FinalSign(
      creator?: null,
      applicant?: null,
      jobID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { creator: string; applicant: string; jobID: BigNumber }
    >;

    JobCompleted(
      jobID?: null
    ): TypedEventFilter<[BigNumber], { jobID: BigNumber }>;

    JobCreated(
      creator?: null,
      initAmount?: null,
      refreshRate?: null,
      jobID?: null,
      eventStreamId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        creator: string;
        initAmount: BigNumber;
        refreshRate: BigNumber;
        jobID: BigNumber;
        eventStreamId: BigNumber;
      }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    UpdateNumberOfEvents(
      newTotal?: null,
      jobID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { newTotal: BigNumber; jobID: BigNumber }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    JOB_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    JOB_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    applyForJob(
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashflowFactory(overrides?: CallOverrides): Promise<BigNumber>;

    changeRefreshRate(
      newRefreshRate: BigNumberish,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chooseApplicant(
      chosenApplicant: string,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureAmount(
      newAmount: BigNumberish,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEventStream(
      _descriptor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createJob(
      _initAmount: BigNumberish,
      _descriptor: string,
      _refreshRate: BigNumberish,
      _eventStreamId: BigNumberish,
      _deadline: BigNumberish,
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eventStreams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalApplicant(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalSign(
      result: boolean,
      jobID: BigNumberish,
      allowedFlow: BigNumberish,
      maxAllowedFlow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEventStreams(overrides?: CallOverrides): Promise<BigNumber>;

    getJobs(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseCashflowAllowance(
      jobId: BigNumberish,
      eventsRecorded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initApplicantSign(
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initCreatorSign(
      jobID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jobToApplicants(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitWork(
      jobID: BigNumberish,
      assetCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCashflowFactoryAddress(
      _cashflowFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    JOB_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    JOB_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyForJob(
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashflowFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeRefreshRate(
      newRefreshRate: BigNumberish,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chooseApplicant(
      chosenApplicant: string,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureAmount(
      newAmount: BigNumberish,
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEventStream(
      _descriptor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createJob(
      _initAmount: BigNumberish,
      _descriptor: string,
      _refreshRate: BigNumberish,
      _eventStreamId: BigNumberish,
      _deadline: BigNumberish,
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eventStreams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalApplicant(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalSign(
      result: boolean,
      jobID: BigNumberish,
      allowedFlow: BigNumberish,
      maxAllowedFlow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEventStreams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJobs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseCashflowAllowance(
      jobId: BigNumberish,
      eventsRecorded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initApplicantSign(
      jobID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initCreatorSign(
      jobID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jobToApplicants(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitWork(
      jobID: BigNumberish,
      assetCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCashflowFactoryAddress(
      _cashflowFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
